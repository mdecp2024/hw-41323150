<h1>About</h1>
<p>國立虎尾科技大學機械設計工程系</p>
<p>National Formosa University</p>
<p>Department of Mechanical Design Engineering</p>
<p>cp2024 計算機程式</p>
<p>課程教材:</p>
<p style="padding-left: 30px;"><a href="https://blog.jupyter.org/introducing-learn-python-with-jupyter-11214f152159">Learn Python with Jupyter</a> (<a href="https://www.learnpythonwithjupyter.com/">site</a>, <a href="https://localhost:9445/downloads/learn_python_with_jupyter.pdf">ebook</a>)</p>
<p style="padding-left: 30px;">教育版帳號 microsoftonline 登入點: <a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a></p>
<p>Teams 線上教學:</p>
<p style="padding-left: 30px;">以 "學號@nfu.edu.tw" 登入 <a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a> Office 365</p>
<p style="padding-left: 30px;">Teams 團隊代碼: <span class="fui-Text ___vec8h90 fk6fouc f1pbo8a8 f1i3iumi figsok6 fpgzoln f1w7gpdv f6juhto f1mtd64y f1y7q3j9 f2jf649 foxqkq2" data-tid="join-team-code">ldodwua</span></p>
<p>個人倉儲:<a href="https://github.com/mdecp2024/hw-41323150">https://github.com/mdecp2024/hw-41323150</a></p>
<p>個人網站:<a href="https://github.com/41323150">https://github.com/41323150</a></p>
<p>其他資訊:</p>
<p style="padding-left: 30px;"><a href="/downloads/cd2023_pj3ag4_zmq_football_4.7.7z">cd2023_pj3ag4_zmq_football_4.7.7z</a></p>
<p style="padding-left: 30px;"><a href="https://localhost:9446/downloads/cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z">cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z</a></p>
<h1>Attendance</h1>
<p>出席 (10%) - 自行舉證評分</p>
<p>自行利用 Github commits 提交記錄評分.</p>
<h1>HW 1</h1>
<h4>主題: 基於瀏覽器的分散式版次管理與整合程式開發環境 (10%)<span style="background-color: #ffff99;"><br/></span></h4>
<p style="padding-left: 30px;">USB 隨身碟:</p>
<p style="padding-left: 60px;">下載 <a href="http://229.cycu.org/python_2025_lite.7z">python_2025_lite.7z</a> (428 MB, 解開壓縮後約 1.5 GB)</p>
<p style="padding-left: 30px;"><a href="https://mde.tw/cp2024/content/Jupyter.html">Jupyter</a></p>
<p style="padding-left: 30px;">What are Github and Codespaces?</p>
<p style="padding-left: 60px;"><a href="https://docs.github.com/en/get-started/start-your-journey/hello-world">Hello World - GitHub Docs</a></p>
<p style="padding-left: 30px;">利用包含學號的字串作為帳號, 申請免費使用 Github.</p>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 1</p>
<hr/>
<p>PART 1: Creating the basics 資料整理 (10%)</p>
<p>啟動可攜程式系統後, 在命令列中:</p>
<p>y:\&gt;cd notebook</p>
<p>y:\notebook&gt;jupyter lab --collaborative</p>
<p>進入 <a href="/downloads/01_string_input_print.ipynb">01_string_input_print.ipynb</a> 練習如何修改 PART1 notebook 後存檔, 上傳至作業倉儲中的 downloads 目錄後, 透過 <a href="https://nbviewer.org/">https://nbviewer.org/</a> 將已經提交的 <a href="/downloads/01_string_input_print.ipynb">01_string_input_print.ipynb</a>, 嵌入下列網頁中.</p>
<p><iframe height="400" src="https://nbviewer.org/urls/mde.tw/cp2024_hw/downloads/01_string_input_print.ipynb" width="600"></iframe></p>
<p>上列 iframe 標註的 html 語法:</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;iframe width="600" height="400" src="https://nbviewer.org/urls/mde.tw/cp2024_hw/downloads/01_string_input_print.ipynb"&gt;&lt;/iframe&gt;</pre>
<p>完成上述流程整理後, 請將 HW1 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 1 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 Topic 1 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<p></p>
<h2>w7</h2>
<p>錄影測試</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">a = "我會寫python程式了"
for i in range(1,10):
    print(i,a)</pre>
<p><a href="https://ubiquitous-guacamole-7vpvrxq567rr3rx6j-8081.app.github.dev/content/Brython.html?src=https://gist.githubusercontent.com/41323150/95fc51c6b7712763a5f856bde9d9206f/raw/c3fa5ecc6c5a32f14a963ba8534495d79953057c/w7.py">完成品</a><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/MtO6z1MQjEA?si=cfd3uAi7KpArf2UU" title="YouTube video player" width="560"></iframe></p>
<p></p>
<p></p><h2>w10</h2>
<p><strong></strong>題目一</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/RMxZ2e3ccp0?si=nQIryoAe9aOwuyoc" title="YouTube video player" width="560"></iframe></p>
<p></p>
<p></p>
<p>題目二</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/o_LGwUsqfIs?si=_2xeGPrYNHEXlPrC" title="YouTube video player" width="560"></iframe></p>
<p></p>
<p>題目三</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/27-p-AzKs6o?si=FkvIoWeU5gXdAULI" title="YouTube video player" width="560"></iframe></p>
<p></p>
<p></p>
<p></p><h2>w11_hw</h2>
<p>作業一</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/yBRYYVYZic8?si=o_8Pc9Vq57v4LRh_" title="YouTube video player" width="560"></iframe></p>
<p><a href="https://ubiquitous-guacamole-7vpvrxq567rr3rx6j-8081.app.github.dev/content/Brython.html?src=https://gist.githubusercontent.com/41323150/e821869c24e0fc5e8590ba925e2295e4/raw/68020773304b74ea116a66edbe7c68d193a31b42/w11-1.py">解:</a></p>
<p>程式</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import math

# 定義圓形列印函數
def print_circle():
    # 圓形的參數
    size = 10  # 字元區域大小 (10x10)
    radius = size // 2  # 圓的半徑
    center = radius - 0.5  # 圓心位置

    # 調整比例因子，讓圓形更接近正圓
    aspect_ratio = 2  # 調整行與列的比例

    # 繪製圓形
    for y in range(size):
        for x in range(size * aspect_ratio):
            # 計算該點是否在圓內
            distance = math.sqrt(((x / aspect_ratio) - center) ** 2 + (y - center) ** 2)
            if distance &lt;= radius:
                print("*", end="")  # 圓內用 "*" 表示
            else:
                print(" ", end="")  # 圓外用空格表示
        print()  # 換行

# 呼叫函數列印圓形
print_circle()</pre>
<p></p>
<p>作業二</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/0xzwG443zCc?si=-2fsJCcLyNOvOiTk" title="YouTube video player" width="560"></iframe></p>
<p><a href="https://ubiquitous-guacamole-7vpvrxq567rr3rx6j-8081.app.github.dev/content/Brython.html?src=https://gist.githubusercontent.com/41323150/e821869c24e0fc5e8590ba925e2295e4/raw/68020773304b74ea116a66edbe7c68d193a31b42/w11-2.py">解</a>:</p>
<p>程式</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import html
from browser import document as doc

# 利用 html 建立 canvas 超文件物件
canvas = html.CANVAS(width=400, height=400)
brython_div = doc["brython_div1"]
brython_div &lt;= canvas

# 每一格的 pixel 數
gs = 40

# gs*tc = canvas width and height
ctx = canvas.getContext("2d")

def dRect(lux, luy, w, h, s=1, c="lightgrey"):
    ctx.lineWidth = s
    ctx.strokeStyle = c  # 修正大小寫
    ctx.beginPath()
    ctx.rect(lux, luy, w, h)
    ctx.stroke()

def grid(width, height, grid_pix):
    for i in range(width):
        for j in range(height):
            dRect(i * grid_pix, j * grid_pix, grid_pix, grid_pix, 1, "lightgrey")

def fill(x, y, color):
    ctx.fillStyle = color
    ctx.fillRect(x * gs, y * gs, gs, gs)

def draw_circle(grid_size, radius):
    center = grid_size // 2
    for y in range(grid_size):
        for x in range(grid_size):
            # 使用格子中心進行距離計算
            distance = (((x + 0.5) - center) ** 2 + ((y + 0.5) - center) ** 2) ** 0.5
            if distance &lt;= radius:
                fill(x, y, "black")

# 繪製 10x10 的格子
grid(10, 10, gs)

# 使用黑色方格圍出一個圓，半徑為 4 格
draw_circle(10, 4)
</pre>
<p></p>
<p>成品:</p>
<p><img alt="" height="351" src="/images/螢幕擷取畫面 2024-11-28 152532.png" width="348"/></p>
<p></p>
<p>1.  已知可以用 Python 程式<a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/5e6eda7a004c15fa7262b9a80bfa4af6/raw/c2225ac22f32ee8485a630b42cf3f4d8567bb661/up_to_down_pyramid.py">由上往下列印三角形 *</a>, 或<a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/5e6eda7a004c15fa7262b9a80bfa4af6/raw/56793c72d4495d564e3cc6214ed5fb68dbd2b21d/left_to_right_pyramid.py">由左往右列印三角形 *</a>, 請將此程式延伸到可以在 10x10 的字元區域中, 以 "*" 字元列印出圓型區域. 完成後請將程式碼存入個人 Gist 後, 直接在個人作業網站中的 Brython 頁面中執行. (提示: ?src=gist_script_URL)</p>
<p>2. 已知可以在網頁中利用 Brython 繪製方格與塗色, 如下連結, 請設法修改此一程式, 直接將程式存入個人的 Gist, 並利用黑色方塊圍出一個圓形區域.</p>
<p><a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/5705fc2a67aa1db0c0d44d6d0478b08b/raw/f95909804a1f134963cade8463eeb9bd32129ea8/grid_line_and_fill_in_Brython.py">網頁上的方格與塗色</a></p>
<p>3. 完成上列題目後, 請利用 Youtube 影片<span>簡報</span>個人的解題過程與心得.</p>
<p></p>
<p>心得:</p>
<p>1.嘗試寫了之後才發現我在迴圈這部分還不熟，還需要再努力。</p>
<p>2.我有點太依賴Chat GPT大神了，還需要另外花時間去學習與理解。</p>
<p></p>
<p></p>
<p></p>
<h2>w12</h2>
<p>題目</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/UzsZbLwks4s?si=4DUGz-7h18EAnE00" title="YouTube video player" width="560"></iframe></p>
<p><a href="https://ubiquitous-guacamole-7vpvrxq567rr3rx6j-8081.app.github.dev/content/Brython.html?src=https://gist.githubusercontent.com/41323150/e821869c24e0fc5e8590ba925e2295e4/raw/a64d6866408a373ceef118a505710dd95e82933d/w12-1.py">解:</a></p>
<p>程式碼</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">n = 5  #總共的行數
spase = "_"
'''
for i in range(n):  #對於每一行
    #印出空格
    print(space * (n - i - 1), end='')
'''
"""
for i in range(n):  #對於每一行
    #印出空格
    print(space * (n - i - 1), end='')
"""
for i in range(n):  #對於每一行
    #印出空格
    #print(space * (n - i - 1), end='')
    print("目前的數字 " + str(i))</pre>
<p></p>
<p></p>
<h3>w12_hw</h3>
<p><span>1. 請各組組員分別利用 </span><span>Brython 以及 Jupyter lab</span><span> 環境, 執行</span><a href="http://229.cycu.org/python_2025_lite.7z">可攜程式</a><span> notebook 目錄中的 </span><span>01_string_input_print.ipynb 至 10_for_search.ipynb</span><span> 筆記本程式, 完成後請將能在 Brython 執行的程式碼存入個人 </span><span>Gist</span><span> 後, 將各程式執行連結放入 w12_hw 網頁上. 最後請說明各範例中所使用的程式語法以及執行心得.</span></p>
<p></p>
<p><a href="https://ubiquitous-guacamole-7vpvrxq567rr3rx6j-8081.app.github.dev/content/Brython.html?src=https://gist.githubusercontent.com/41323150/e821869c24e0fc5e8590ba925e2295e4/raw/58f7ff31286e8f149dab8567fda524be9c992f0a/w12_hw-1.py">練習1</a></p>
<p>說明:<span>運用的程式語法為print，執行後會顯示你輸入在print後的字串</span></p>
<p><a href="https://ubiquitous-guacamole-7vpvrxq567rr3rx6j-8081.app.github.dev/content/Brython.html?src=https://gist.githubusercontent.com/41323150/e821869c24e0fc5e8590ba925e2295e4/raw/bc7e0e0150228ed4a6424d045e3d2e528a8f950e/w12_hw-2.py">練習2</a></p>
<p>說明:<span>用到的語法是input及print，執行後，他會出現提示框，讓你輸入自己想要的字串，再將字串放到預設好的對話當中</span></p>
<p><a href="https://ubiquitous-guacamole-7vpvrxq567rr3rx6j-8081.app.github.dev/content/Brython.html?src=https://gist.githubusercontent.com/41323150/e821869c24e0fc5e8590ba925e2295e4/raw/6f741b79bedfca3b6f4b526aa213c7b543b4d36c/w12_hw-3.py">練習3</a></p>
<p><span>說明:一樣是input和print，還有用到if，else的語法，若做出設計者預設的答案，就會做出不同的回應。</span></p>
<p><a href="https://ubiquitous-guacamole-7vpvrxq567rr3rx6j-8081.app.github.dev/content/Brython.html?src=https://gist.githubusercontent.com/41323150/e821869c24e0fc5e8590ba925e2295e4/raw/9e865fb1ed80c663af82f1fec3625a46bde44ffa/w12_hw-4.py">練習4</a></p>
<p><span>說明:用到input、print、if、else、in的語法，利用了購物車的概念，將需要購買的東西用in語法增加在list中，也可以刪除不要的東西。</span></p>
<p><a href="https://ubiquitous-guacamole-7vpvrxq567rr3rx6j-8081.app.github.dev/content/Brython.html?src=https://gist.githubusercontent.com/41323150/e821869c24e0fc5e8590ba925e2295e4/raw/159efba0b46864c5c2cbfa44f90ab9b81ec7070b/w12_hw-5.py">練習5</a></p>
<p><span>說明:新增了.index、.pop、.insert語法.index是用來搜尋，如果沒有會跳出error，pop則是移除列表中的索引，若()中是空白，則會刪除最後一個索引。</span></p>
<p><a href="https://ubiquitous-guacamole-7vpvrxq567rr3rx6j-8081.app.github.dev/content/Brython.html?src=https://gist.githubusercontent.com/41323150/e821869c24e0fc5e8590ba925e2295e4/raw/8874903fe15e279d1f135a0cb283be1f46e006f5/w12_hw-6.py">練習6</a></p>
<p><span>說明:主要在教學列表的使用方式，【】內第一個是起點，第二個數字是終點，第三個數字是每多少輸出一次。</span></p>
<p><a href="https://ubiquitous-guacamole-7vpvrxq567rr3rx6j-8081.app.github.dev/content/Brython.html?src=https://gist.githubusercontent.com/41323150/e821869c24e0fc5e8590ba925e2295e4/raw/eec7bee0c8ad06f7721294003849959f33dd13c2/w12_hw-7_1.py">練習7-1</a></p>
<p><a href="https://ubiquitous-guacamole-7vpvrxq567rr3rx6j-8081.app.github.dev/content/Brython.html?src=https://gist.githubusercontent.com/41323150/e821869c24e0fc5e8590ba925e2295e4/raw/64eac5747435bb97b02c255447bc6b066aa46a8a/w12_hw-7_2.py">練習7-2</a></p>
<p><a href="https://ubiquitous-guacamole-7vpvrxq567rr3rx6j-8081.app.github.dev/content/Brython.html?src=https://gist.githubusercontent.com/41323150/e821869c24e0fc5e8590ba925e2295e4/raw/0313dfd4d9ecfd2af97bf33c6810a472fef21495/w12_hw-7_3.py">練習7-3</a></p>
<p>說明:<span>增加了del的語法，</span><span class="Y2IQFc" lang="zh-TW">是一個用於刪除物件、變數、列表元素、字典項目等關鍵字，類似加入購物車後，不想要購買就按下刪除觸發del的這個語法。</span></p>
<p><a href="https://ubiquitous-guacamole-7vpvrxq567rr3rx6j-8081.app.github.dev/content/Brython.html?src=https://gist.githubusercontent.com/41323150/e821869c24e0fc5e8590ba925e2295e4/raw/1c49e21fc3c697ebfb20f52cf2cf01ed6d2db065/w12_hw-8_1.py">練習8-1</a></p>
<p><a href="https://ubiquitous-guacamole-7vpvrxq567rr3rx6j-8081.app.github.dev/content/Brython.html?src=https://gist.githubusercontent.com/41323150/e821869c24e0fc5e8590ba925e2295e4/raw/1c49e21fc3c697ebfb20f52cf2cf01ed6d2db065/w12_hw-8_2.py">練習8-2</a></p>
<p><a href="https://ubiquitous-guacamole-7vpvrxq567rr3rx6j-8081.app.github.dev/content/Brython.html?src=https://gist.githubusercontent.com/41323150/e821869c24e0fc5e8590ba925e2295e4/raw/1c49e21fc3c697ebfb20f52cf2cf01ed6d2db065/w12_hw-8_3.py">練習8-3</a></p>
<p><span>說明:使用了for...in range的語法，從列表中選出要的字串來表示。</span></p>
<p><a href="https://gist.githubusercontent.com/41323150/e821869c24e0fc5e8590ba925e2295e4/raw/91ca598a4b1ce0d6c6ec5b5ff4d48e7ced3251ec/w12_hw-9_1.py">練習9-1</a></p>
<p><a href="https://ubiquitous-guacamole-7vpvrxq567rr3rx6j-8081.app.github.dev/content/Brython.html?src=https://gist.githubusercontent.com/41323150/e821869c24e0fc5e8590ba925e2295e4/raw/91ca598a4b1ce0d6c6ec5b5ff4d48e7ced3251ec/w12_hw-9_2.py">練習9-2</a></p>
<p><a href="https://ubiquitous-guacamole-7vpvrxq567rr3rx6j-8081.app.github.dev/content/Brython.html?src=https://gist.githubusercontent.com/41323150/e821869c24e0fc5e8590ba925e2295e4/raw/91ca598a4b1ce0d6c6ec5b5ff4d48e7ced3251ec/w12_hw-9_3.py">練習9-3</a></p>
<p><span>說明:用到了for...loop，else的語法，操作列表list進行迴圈處理，使用if...else來檢查條件成立，來判斷是不是我們想要的東西。</span></p>
<p><a href="https://ubiquitous-guacamole-7vpvrxq567rr3rx6j-8081.app.github.dev/content/Brython.html?src=https://gist.githubusercontent.com/41323150/e821869c24e0fc5e8590ba925e2295e4/raw/7df72c81e1de8e172cc137420e0b9394a2007f06/w12_hw.py">練習10</a></p>
<p><span>說明:用for迴圈查看list列表並根據是否條件成立並進行輸出。</span></p>
<p><span></span></p>
<p><span>心得</span></p>
<h2>w13_hw</h2>
<p><a href="https://ubiquitous-guacamole-7vpvrxq567rr3rx6j-8081.app.github.dev/content/Brython.html?src=https://gist.githubusercontent.com/41323150/5a09a826c0d00aba5a336335c7a87747/raw/0daec87ebf43940eb68cec3e7c720e513c01056a/w13_hw.py">解</a></p>
<p></p>
<p></p>
<p><a href="https://gist.githubusercontent.com/41323150/5a09a826c0d00aba5a336335c7a87747/raw/dda8c14567e76fed24d075c64174aaa6fb9db7a9/w13_hw.py">程式碼</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import html
from browser import document as doc
import math

canvas = html.CANVAS(width=500, height=500)
brython_div = doc["brython_div1"]
brython_div &lt;= canvas

ctx = canvas.getContext("2d")
ctx.lineWidth = 4

# 混色的
ctx.globalCompositeOperation = "screem"

# 黑邊圓*2 (每個畫四個邊邊)
ctx.strokeStyle = 'black'

# 第一個圓
ctx.beginPath()
ctx.arc(160, 160, 141, 0.25 * math.pi, 0.75 * math.pi)
ctx.fillStyle = "Coral"  
ctx.fill()
ctx.stroke()

ctx.beginPath()
ctx.arc(160, 160, 141, 0.75 * math.pi, 1.25 * math.pi)
ctx.fillStyle = "MediumPurple"  
ctx.fill()
ctx.stroke()

ctx.beginPath()
ctx.arc(160, 160, 141, 1.25 * math.pi, 1.75 * math.pi)
ctx.fillStyle = "LimeGreen"  
ctx.fill()
ctx.stroke()

ctx.beginPath()
ctx.arc(160, 160, 141, 1.75 * math.pi, 0.25 * math.pi)
ctx.fillStyle = "Beige"  
ctx.fill()
ctx.stroke()

# 第二個圓
ctx.beginPath()
ctx.arc(260, 260, 141, 1.25 * math.pi, 1.75 * math.pi)
ctx.fillStyle = "SkyBlue"
ctx.fill()
ctx.stroke()

ctx.beginPath()
ctx.arc(260, 260, 141, 1.75 * math.pi, 0.25 * math.pi)
ctx.fillStyle = "Crimson"  
ctx.fill()
ctx.stroke()

ctx.beginPath()
ctx.arc(260, 260, 141, 0.25 * math.pi, 0.75 * math.pi)
ctx.fillStyle = "LightCyan"
ctx.fill()
ctx.stroke()

ctx.beginPath()
ctx.arc(260, 260, 141, 0.75 * math.pi, 1.25 * math.pi)
ctx.fillStyle = "Gold"
ctx.fill()
ctx.stroke()

# 紅方形*2 (4個三角形)
ctx.strokeStyle = 'red'
ctx.beginPath()
ctx.moveTo(60, 60)
ctx.lineTo(60, 260)
ctx.lineTo(260, 260)
ctx.fillStyle = "ForestGreen"
ctx.fill()
ctx.stroke()

ctx.beginPath()
ctx.moveTo(60, 60)
ctx.lineTo(260, 60)
ctx.lineTo(260, 260)
ctx.fillStyle = "DarkSlateBlue"  
ctx.fill()
ctx.stroke()

ctx.beginPath()
ctx.moveTo(160, 160)
ctx.lineTo(360, 160)
ctx.lineTo(360, 360)
ctx.fillStyle = "LightYellow" 
ctx.fill()
ctx.stroke()

ctx.beginPath()
ctx.moveTo(160, 160)
ctx.lineTo(160, 360)
ctx.lineTo(360, 360)
ctx.fillStyle = "PaleGreen"  
ctx.fill()
ctx.stroke()

# 重疊的小方型
ctx.beginPath()
ctx.moveTo(160, 160)
ctx.lineTo(160, 260)
ctx.lineTo(260, 260)
ctx.fillStyle = "SteelBlue"  
ctx.fill()
ctx.stroke()

ctx.beginPath()
ctx.moveTo(160, 160)
ctx.lineTo(260, 160)
ctx.lineTo(260, 260)
ctx.fillStyle = "DarkOrchid"
ctx.fill()
ctx.stroke()

# 藍斜線
ctx.strokeStyle = 'blue'
ctx.beginPath()
ctx.moveTo(60, 60)
ctx.lineTo(360,360)
ctx.stroke()</pre>
<p></p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
    brython({debug:1, pythonpath:['./../cmsimde/static/','./../downloads/py/']});
}
</script>
</p>
<div id="brython_div1"></div>
<p>
<script type="text/python3">
from browser import html
from browser import document as doc
import math

canvas = html.CANVAS(width=500, height=500)
brython_div = doc["brython_div1"]
brython_div <= canvas

ctx = canvas.getContext("2d")
ctx.lineWidth = 4

# 混色的
ctx.globalCompositeOperation = "screem"

# 黑邊圓*2 (每個畫四個邊邊)
ctx.strokeStyle = 'black'

# 第一個圓
ctx.beginPath()
ctx.arc(160, 160, 141, 0.25 * math.pi, 0.75 * math.pi)
ctx.fillStyle = "Coral"  
ctx.fill()
ctx.stroke()

ctx.beginPath()
ctx.arc(160, 160, 141, 0.75 * math.pi, 1.25 * math.pi)
ctx.fillStyle = "MediumPurple"  
ctx.fill()
ctx.stroke()

ctx.beginPath()
ctx.arc(160, 160, 141, 1.25 * math.pi, 1.75 * math.pi)
ctx.fillStyle = "LimeGreen"  
ctx.fill()
ctx.stroke()

ctx.beginPath()
ctx.arc(160, 160, 141, 1.75 * math.pi, 0.25 * math.pi)
ctx.fillStyle = "Beige"  
ctx.fill()
ctx.stroke()

# 第二個圓
ctx.beginPath()
ctx.arc(260, 260, 141, 1.25 * math.pi, 1.75 * math.pi)
ctx.fillStyle = "SkyBlue"
ctx.fill()
ctx.stroke()

ctx.beginPath()
ctx.arc(260, 260, 141, 1.75 * math.pi, 0.25 * math.pi)
ctx.fillStyle = "Crimson"  
ctx.fill()
ctx.stroke()

ctx.beginPath()
ctx.arc(260, 260, 141, 0.25 * math.pi, 0.75 * math.pi)
ctx.fillStyle = "LightCyan"
ctx.fill()
ctx.stroke()

ctx.beginPath()
ctx.arc(260, 260, 141, 0.75 * math.pi, 1.25 * math.pi)
ctx.fillStyle = "Gold"
ctx.fill()
ctx.stroke()

# 紅方形*2 (4個三角形)
ctx.strokeStyle = 'red'
ctx.beginPath()
ctx.moveTo(60, 60)
ctx.lineTo(60, 260)
ctx.lineTo(260, 260)
ctx.fillStyle = "SteelBlue"
ctx.fill()
ctx.stroke()

ctx.beginPath()
ctx.moveTo(60, 60)
ctx.lineTo(260, 60)
ctx.lineTo(260, 260)
ctx.fillStyle = "DarkSlateBlue"  
ctx.fill()
ctx.stroke()

ctx.beginPath()
ctx.moveTo(160, 160)
ctx.lineTo(360, 160)
ctx.lineTo(360, 360)
ctx.fillStyle = "LightYellow" 
ctx.fill()
ctx.stroke()

ctx.beginPath()
ctx.moveTo(160, 160)
ctx.lineTo(160, 360)
ctx.lineTo(360, 360)
ctx.fillStyle = "PaleGreen"  
ctx.fill()
ctx.stroke()

# 重疊的小方型
ctx.beginPath()
ctx.moveTo(160, 160)
ctx.lineTo(160, 260)
ctx.lineTo(260, 260)
ctx.fillStyle = "ForestGreen"  
ctx.fill()
ctx.stroke()

ctx.beginPath()
ctx.moveTo(160, 160)
ctx.lineTo(260, 160)
ctx.lineTo(260, 260)
ctx.fillStyle = "DarkOrchid"
ctx.fill()
ctx.stroke()

# 藍斜線
ctx.strokeStyle = 'blue'
ctx.beginPath()
ctx.moveTo(60, 60)
ctx.lineTo(360,360)
ctx.stroke()
</script>
</p><h2>w14_ex</h2>
<p>3圓相切</p>
<p><a href="https://gist.githubusercontent.com/41323150/5a09a826c0d00aba5a336335c7a87747/raw/dda8c14567e76fed24d075c64174aaa6fb9db7a9/w14_ex-1.py">程式碼</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import html
from browser import document as doc
import random
import math

# 定義一個函式來初始化畫布
def initialize_canvas(canvas_width=400, canvas_height=400, id="brython_div1"):
    canvas = html.CANVAS(width=canvas_width, height=canvas_height)
    brython_div = doc[id]  # 獲取指定 id 的 div 元素
    brython_div &lt;= canvas  # 將 canvas 插入到該 div 中
    ctx = canvas.getContext("2d")
    return canvas, ctx

# 定義一個隨機顏色生成函式
def random_color_generator():
    r = random.randint(0, 255)
    g = random.randint(0, 255)
    b = random.randint(0, 255)
    return f"rgb({r}, {g}, {b})"

# 判斷點 (px, py) 是否在圓內
def is_point_in_circle(px, py, cx, cy, r):
    return (px - cx) ** 2 + (py - cy) ** 2 &lt;= r ** 2

# 繪製三個圓並處理交集
def draw_circles(x1, y1, r1, x2, y2, r2, x3, y3, r3):
    canvas, ctx = initialize_canvas(400, 400)
    ctx.clearRect(0, 0, canvas.width, canvas.height)

    color_dict = {}

    for py in range(0, canvas.height):
        for px in range(0, canvas.width):
            # 判斷該點是否在各圓內
            in_circle1 = is_point_in_circle(px, py, x1, y1, r1)
            in_circle2 = is_point_in_circle(px, py, x2, y2, r2)
            in_circle3 = is_point_in_circle(px, py, x3, y3, r3)

            # 確定交集情況
            if in_circle1 and in_circle2 and in_circle3:
                if "intersection_all" not in color_dict:
                    color_dict["intersection_all"] = random_color_generator()
                current_color = color_dict["intersection_all"]
            elif in_circle1 and in_circle2:
                if "intersection_1_2" not in color_dict:
                    color_dict["intersection_1_2"] = random_color_generator()
                current_color = color_dict["intersection_1_2"]
            elif in_circle1 and in_circle3:
                if "intersection_1_3" not in color_dict:
                    color_dict["intersection_1_3"] = random_color_generator()
                current_color = color_dict["intersection_1_3"]
            elif in_circle2 and in_circle3:
                if "intersection_2_3" not in color_dict:
                    color_dict["intersection_2_3"] = random_color_generator()
                current_color = color_dict["intersection_2_3"]
            elif in_circle1:
                if "circle1" not in color_dict:
                    color_dict["circle1"] = random_color_generator()
                current_color = color_dict["circle1"]
            elif in_circle2:
                if "circle2" not in color_dict:
                    color_dict["circle2"] = random_color_generator()
                current_color = color_dict["circle2"]
            elif in_circle3:
                if "circle3" not in color_dict:
                    color_dict["circle3"] = random_color_generator()
                current_color = color_dict["circle3"]
            else:
                current_color = "white"  # 背景色

            ctx.fillStyle = current_color
            ctx.fillRect(px, py, 1, 1)  # 填充一個像素

# 設定三個圓的圓心和半徑
x1, y1, r1 = 150, 200, 100  # 圓1
x2, y2, r2 = 250, 200, 100  # 圓2
x3, y3, r3 = 200, 300, 100  # 圓3

# 呼叫函式繪製三個圓
draw_circles(x1, y1, r1, x2, y2, r2, x3, y3, r3)</pre>
<p><br/><br/></p>
<p><a href="https://ubiquitous-guacamole-7vpvrxq567rr3rx6j-8081.app.github.dev/content/Brython.html?src=https://gist.githubusercontent.com/41323150/5a09a826c0d00aba5a336335c7a87747/raw/b09badf7e2388569b1a49ab23c9381ecd4215ad7/w14_ex-1.py">解</a></p>
<p>and</p>
<p>多圓相切</p>
<p></p>
<p><a href="https://gist.githubusercontent.com/41323150/5a09a826c0d00aba5a336335c7a87747/raw/a8d0eb272afecded36e675f2bbda3d4d1a2007b0/w14_ex-2.py">程式碼</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import html
from browser import document as doc
import random
import math

# 定義一個函式來初始化畫布
def initialize_canvas(canvas_width=400, canvas_height=400, id="brython_div1"):
    """
    初始化畫布，創建一個指定大小的 Canvas 元素，並將其加到 HTML 文件中。
    返回畫布元素和它的 2D 繪圖上下文。
    """
    canvas = html.CANVAS(width=canvas_width, height=canvas_height)
    brython_div = doc[id]
    brython_div &lt;= canvas
    ctx = canvas.getContext("2d")
    return canvas, ctx

# 定義一個隨機顏色生成函式
def random_color_generator():
    r = random.randint(0, 255)
    g = random.randint(0, 255)
    b = random.randint(0, 255)
    return f"rgb({r}, {g}, {b})"

# 判斷點是否在圓內
def is_point_in_circle(px, py, cx, cy, r):
    return (px - cx) ** 2 + (py - cy) ** 2 &lt;= r ** 2

# 檢查所有圓是否有重疊
def ensure_no_isolated_circles(circles):
    overlap = [False] * len(circles)
    for i in range(len(circles)):
        for j in range(i + 1, len(circles)):
            cx1, cy1, r1 = circles[i]
            cx2, cy2, r2 = circles[j]
            distance = math.sqrt((cx1 - cx2) ** 2 + (cy1 - cy2) ** 2)
            if distance &lt;= r1 + r2:  # 判斷是否有重疊
                overlap[i] = True
                overlap[j] = True
    return all(overlap)

# 使用者設定的多個圓，並進行掃描線填充
def draw_circles():
    canvas, ctx = initialize_canvas(400, 400)
    ctx.clearRect(0, 0, canvas.width, canvas.height)

    color_dict = {}

    # 隨機生成 5 到 10 個圓，確保沒有圓是孤立的
    while True:
        num_circles = random.randint(5, 10)
        circles = [
            (random.randint(50, 350), random.randint(50, 350), random.randint(50, 100))
            for _ in range(num_circles)
        ]
        if ensure_no_isolated_circles(circles):
            break

    for py in range(0, canvas.height):
        for px in range(0, canvas.width):
            overlapping_indices = []

            for i, (cx, cy, r) in enumerate(circles):
                if is_point_in_circle(px, py, cx, cy, r):
                    overlapping_indices.append(i)

            if overlapping_indices:
                overlap_key = "_".join(map(str, sorted(overlapping_indices)))
                if overlap_key not in color_dict:
                    color_dict[overlap_key] = random_color_generator()
                current_color = color_dict[overlap_key]
            else:
                current_color = "white"

            ctx.fillStyle = current_color
            ctx.fillRect(px, py, 1, 1)

draw_circles()</pre>
<p><br/><br/></p>
<p><a href="https://ubiquitous-guacamole-7vpvrxq567rr3rx6j-8081.app.github.dev/content/Brython.html?src=https://gist.githubusercontent.com/41323150/5a09a826c0d00aba5a336335c7a87747/raw/b09badf7e2388569b1a49ab23c9381ecd4215ad7/w14_ex-2.py">解</a></p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['./../cmsimde/static/','./../downloads/py/']});
}
</script>
</p>
<div id="brython_div1"></div>
<p>
<script type="text/python3">
from browser import html
from browser import document as doc
import random
import math

# 定義一個函式來初始化畫布
def initialize_canvas(canvas_width=400, canvas_height=400, id="brython_div1"):
    canvas = html.CANVAS(width=canvas_width, height=canvas_height)
    brython_div = doc[id]  # 獲取指定 id 的 div 元素
    brython_div <= canvas  # 將 canvas 插入到該 div 中
    ctx = canvas.getContext("2d")
    return canvas, ctx

# 定義一個隨機顏色生成函式
def random_color_generator():
    r = random.randint(0, 255)
    g = random.randint(0, 255)
    b = random.randint(0, 255)
    return f"rgb({r}, {g}, {b})"

# 判斷點 (px, py) 是否在圓內
def is_point_in_circle(px, py, cx, cy, r):
    return (px - cx) ** 2 + (py - cy) ** 2 <= r ** 2

# 繪製三個圓並處理交集
def draw_circles(x1, y1, r1, x2, y2, r2, x3, y3, r3):
    canvas, ctx = initialize_canvas(400, 400)
    ctx.clearRect(0, 0, canvas.width, canvas.height)

    color_dict = {}

    for py in range(0, canvas.height):
        for px in range(0, canvas.width):
            # 判斷該點是否在各圓內
            in_circle1 = is_point_in_circle(px, py, x1, y1, r1)
            in_circle2 = is_point_in_circle(px, py, x2, y2, r2)
            in_circle3 = is_point_in_circle(px, py, x3, y3, r3)

            # 確定交集情況
            if in_circle1 and in_circle2 and in_circle3:
                if "intersection_all" not in color_dict:
                    color_dict["intersection_all"] = random_color_generator()
                current_color = color_dict["intersection_all"]
            elif in_circle1 and in_circle2:
                if "intersection_1_2" not in color_dict:
                    color_dict["intersection_1_2"] = random_color_generator()
                current_color = color_dict["intersection_1_2"]
            elif in_circle1 and in_circle3:
                if "intersection_1_3" not in color_dict:
                    color_dict["intersection_1_3"] = random_color_generator()
                current_color = color_dict["intersection_1_3"]
            elif in_circle2 and in_circle3:
                if "intersection_2_3" not in color_dict:
                    color_dict["intersection_2_3"] = random_color_generator()
                current_color = color_dict["intersection_2_3"]
            elif in_circle1:
                if "circle1" not in color_dict:
                    color_dict["circle1"] = random_color_generator()
                current_color = color_dict["circle1"]
            elif in_circle2:
                if "circle2" not in color_dict:
                    color_dict["circle2"] = random_color_generator()
                current_color = color_dict["circle2"]
            elif in_circle3:
                if "circle3" not in color_dict:
                    color_dict["circle3"] = random_color_generator()
                current_color = color_dict["circle3"]
            else:
                current_color = "white"  # 背景色

            ctx.fillStyle = current_color
            ctx.fillRect(px, py, 1, 1)  # 填充一個像素

# 設定三個圓的圓心和半徑
x1, y1, r1 = 150, 200, 100  # 圓1
x2, y2, r2 = 250, 200, 100  # 圓2
x3, y3, r3 = 200, 300, 100  # 圓3

# 呼叫函式繪製三個圓
draw_circles(x1, y1, r1, x2, y2, r2, x3, y3, r3)
</script>
</p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
    brython({debug:1, pythonpath:['./../cmsimde/static/','./../downloads/py/']});
}
</script>
</p>
<div id="brython_div1"></div>
<p>
<script type="text/python3">
from browser import html
from browser import document as doc
import random
import math

# 定義一個函式來初始化畫布
def initialize_canvas(canvas_width=400, canvas_height=400, id="brython_div1"):
    """
    初始化畫布，創建一個指定大小的 Canvas 元素，並將其加到 HTML 文件中。
    返回畫布元素和它的 2D 繪圖上下文。
    """
    canvas = html.CANVAS(width=canvas_width, height=canvas_height)
    brython_div = doc[id]
    brython_div <= canvas
    ctx = canvas.getContext("2d")
    return canvas, ctx

# 定義一個隨機顏色生成函式
def random_color_generator():
    r = random.randint(0, 255)
    g = random.randint(0, 255)
    b = random.randint(0, 255)
    return f"rgb({r}, {g}, {b})"

# 判斷點是否在圓內
def is_point_in_circle(px, py, cx, cy, r):
    return (px - cx) ** 2 + (py - cy) ** 2 <= r ** 2

# 檢查所有圓是否有重疊
def ensure_no_isolated_circles(circles):
    overlap = [False] * len(circles)
    for i in range(len(circles)):
        for j in range(i + 1, len(circles)):
            cx1, cy1, r1 = circles[i]
            cx2, cy2, r2 = circles[j]
            distance = math.sqrt((cx1 - cx2) ** 2 + (cy1 - cy2) ** 2)
            if distance <= r1 + r2:  # 判斷是否有重疊
                overlap[i] = True
                overlap[j] = True
    return all(overlap)

# 使用者設定的多個圓，並進行掃描線填充
def draw_circles():
    canvas, ctx = initialize_canvas(400, 400)
    ctx.clearRect(0, 0, canvas.width, canvas.height)

    color_dict = {}

    # 隨機生成 5 到 10 個圓，確保沒有圓是孤立的
    while True:
        num_circles = random.randint(5, 10)
        circles = [
            (random.randint(50, 350), random.randint(50, 350), random.randint(50, 100))
            for _ in range(num_circles)
        ]
        if ensure_no_isolated_circles(circles):
            break

    for py in range(0, canvas.height):
        for px in range(0, canvas.width):
            overlapping_indices = []

            for i, (cx, cy, r) in enumerate(circles):
                if is_point_in_circle(px, py, cx, cy, r):
                    overlapping_indices.append(i)

            if overlapping_indices:
                overlap_key = "_".join(map(str, sorted(overlapping_indices)))
                if overlap_key not in color_dict:
                    color_dict[overlap_key] = random_color_generator()
                current_color = color_dict[overlap_key]
            else:
                current_color = "white"

            ctx.fillStyle = current_color
            ctx.fillRect(px, py, 1, 1)

draw_circles()
</script>
</p>
<div id="brython_div1"></div>
<div></div><h2>w15</h2>
<div>題目1:</div>
<div><a href="https://ubiquitous-guacamole-7vpvrxq567rr3rx6j-8081.app.github.dev/content/Brython.html?src=https://gist.githubusercontent.com/41323150/1302cf8b3ac8250f9e1b9714343fe25f/raw/9c0fc66b833d37c53b6f3c95db5afe559e586134/w15-1.py">從 1 累加到 100</a></div>
<div>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># 定義函數來計算和顯示結果
def calculate_sum():
    total = 0
    for i in range(1, 101):  # 從 1 遍歷到 100
        total += i
    print(f"總和是: {total}")  # 在控制台顯示結果

# 呼叫函數執行
calculate_sum()</pre>
</div>
<p></p>
<div>題目2:</div>
<div><a href="https://ubiquitous-guacamole-7vpvrxq567rr3rx6j-8081.app.github.dev/content/Brython.html?src=https://gist.githubusercontent.com/41323150/1302cf8b3ac8250f9e1b9714343fe25f/raw/41a67c3fb5b64ab5796045bb6e74d786a308db75/w15-2.py">addto</a></div>
<div></div>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">def addto(start, end):
    """
    計算從 start 到 end 的整數總和。
    
    參數:
    - start: 起始值 (整數)
    - end: 結束值 (整數)
    
    回傳:
    - 總和 (整數)
    """
    total = sum(range(start, end + 1))  # 使用內建的 sum 函數
    return total

# 呼叫函式並印出結果
result = addto(1, 100)
print(f"累加的結果是: {result}")</pre>
<p></p>
<p></p>
<div>題目3:</div>
<div><a href="https://ubiquitous-guacamole-7vpvrxq567rr3rx6j-8081.app.github.dev/content/Brython.html?src=https://gist.githubusercontent.com/41323150/1302cf8b3ac8250f9e1b9714343fe25f/raw/41a67c3fb5b64ab5796045bb6e74d786a308db75/w15_hw-3.py">add_only_even</a></div>
<div></div>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">def add_only_even(start, end):
    """
    計算從 start 到 end 之間所有偶數的總和。
    
    參數:
    - start: 起始值 (整數)
    - end: 結束值 (整數)
    
    回傳:
    - 偶數總和 (整數)
    """
    # 使用範圍產生偶數並計算總和
    total = sum(i for i in range(start, end + 1) if i % 2 == 0)
    return total

# 呼叫函式並印出結果
result = add_only_even(1, 100)
print(f"累加的偶數結果是: {result}")</pre>
<p></p>
<div>題目4:</div>
<div><a href="https://ubiquitous-guacamole-7vpvrxq567rr3rx6j-8081.app.github.dev/content/Brython.html?src=https://gist.githubusercontent.com/41323150/1302cf8b3ac8250f9e1b9714343fe25f/raw/4e7b58735c5efcc4d2ffd3b9084ccae4ef5b5900/w15_hw-4.py">add_avoid_8</a></div>
<div></div>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">def add_avoid_8(start, end):
    """計算從 start 到 end 的累加結果，避開包含 '8' 的數字以及基數（奇數）"""
    valid_numbers = [x for x in range(start, end + 1) if '8' not in str(x) and x % 2 == 0]
    print("符合條件的數字:", valid_numbers)  # 打印符合條件的數字，看看哪些數字被選中
    return sum(valid_numbers)

# 測試函式
result = add_avoid_8(1, 100)
print(f"從 1 到 100 的累加總和（避開包含 '8' 的數字以及基數）是：{result}")</pre>
<p></p>
<div>補充:</div>
<div><a href="https://ubiquitous-guacamole-7vpvrxq567rr3rx6j-8081.app.github.dev/content/Brython.html?src=https://gist.githubusercontent.com/41323150/1302cf8b3ac8250f9e1b9714343fe25f/raw/e859237185afa51440f92b7d4209880ef0b00100/w15_-5.py">去除3跟8</a></div>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">def calculate_sum():
    total = 0
    valid_numbers = []  # 用來存儲符合條件的數字
    for i in range(1, 101):  # 從 1 遍歷到 100
        # 檢查數字中是否包含 '8' 或 '3'
        if '8' not in str(i) and '3' not in str(i):
            total += i  # 累加符合條件的數字
            valid_numbers.append(i)  # 把符合條件的數字加到列表中
    print(f"符合條件的數字是: {valid_numbers}")  # 顯示符合條件的數字
    print(f"總和是: {total}")  # 顯示最終總和

# 呼叫函數執行
calculate_sum()</pre>
<p><br/><br/></p><h1>HW 2</h1>
<h4>主題: Python 的數列、判斷式與重複迴圈 (20%)<span style="background-color: #ffff99;"><br/></span></h4>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 2 and Part 3</p>
<hr/>
<p>延續 HW 1 網頁資料整理與程式練習方法, 整理下列內容 (20%):</p>
<p>PART 2: Introduction to lists and if/else statements</p>
<p>PART 3: Introduction to the for loop</p>
<p>完成上述流程整理後, 請將 HW2 自評分數輸入 cp2024 自評表單中.</p>
<p></p>
<h2>HW 2 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 2 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h3>w16_exam1</h3>
<p></p>
<p>請以自己的學號最後四碼作為繪圖的座標原點, (例如: 若學號最後四碼為 3932, 請將 (39, 32) 作為繪圖座標原點), 並以 pixel=2 的黑色直線分別利用 Brython 繪圖, 標示出向右為正的 X 軸, 以及向下為正的 Y 軸, 並且利用文字標示出原點座標 (例如: (39, 32)), 之後請自選最左側圖形的起始點座標, 直接在頁面畫出下列圖像, 繪圖程式除了必須直接列在頁面 html 檔案外, 也請存入自己的 Gist 區域, 並在所完成的圖像下方, 以自選標題的 anchor 連結至 Gist, 讓使用者點擊該連結後, 可以在各自的 Brython 頁面中繪出下列圖像 (<a href="https://www.ccplusmedia.com/wp-content/uploads/2019/10/creative-ad_landscape3.jpg">圖片來源</a>).</p>
<p><a href="https://ubiquitous-guacamole-7vpvrxq567rr3rx6j-8081.app.github.dev/content/Brython.html?src=https://gist.githubusercontent.com/41323150/0b5c3ede22da07e40801d66cad9b22d3/raw/ff21108a37e5ac48e7b6bf6002d3a07e609f91a9/w16_exam1.py">解</a></p>
<p></p>
<p></p>
<p><a href="https://gist.githubusercontent.com/41323150/0b5c3ede22da07e40801d66cad9b22d3/raw/ff21108a37e5ac48e7b6bf6002d3a07e609f91a9/w16_exam1.py">程式碼</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import document, html
import math

# 初始化畫布
def initialize_canvas(canvas_width=1000, canvas_height=400):
    canvas = html.CANVAS(width=canvas_width, height=canvas_height)
    document["brython_div1"] &lt;= canvas  # 加入到 HTML 容器中
    ctx = canvas.getContext("2d")  # 獲取 2D 繪圖上下文
    return canvas, ctx

# 設定學號後四碼原點 (31, 50)
origin_x, origin_y = 3.1 * 10, 5 * 10  # 原始座標

# 初始化畫布
canvas, ctx = initialize_canvas(1000, 400)

# 繪製 X 軸和 Y 軸，只畫向右和向下的部分，並標註
def draw_axes():
    ctx.beginPath()
    
    # 繪製 X 軸向右延伸
    ctx.moveTo(origin_x, origin_y)  # 原點
    ctx.lineTo(canvas.width, origin_y)  # 向右延伸
    ctx.lineTo(canvas.width - 10, origin_y - 5)  # X 軸箭頭
    ctx.lineTo(canvas.width - 10, origin_y + 5)  # X 軸箭頭
    ctx.strokeStyle = "black"
    ctx.lineWidth = 2
    ctx.stroke()

    # 繪製 Y 軸向下延伸
    ctx.beginPath()
    ctx.moveTo(origin_x, origin_y)  # 原點
    ctx.lineTo(origin_x, canvas.height)  # 向下延伸
    ctx.lineTo(origin_x - 5, canvas.height - 10)  # Y 軸箭頭
    ctx.lineTo(origin_x + 5, canvas.height - 10)  # Y 軸箭頭
    ctx.stroke()

    # 標註原點及方向
    ctx.fillStyle = "black"
    ctx.font = "12px Arial"
    ctx.fillText(f"({31}, {50})", origin_x + 5, origin_y - 5)
    ctx.fillText("正X", canvas.width - 40, origin_y - 10)  # X 軸正方向
    ctx.fillText("正Y", origin_x + 10, canvas.height - 10)  # Y 軸正方向

# 繪製六邊形
def draw_hexagon(x, y, size, color):
    ctx.beginPath()
    for i in range(6):
        angle = (i * 60) * (math.pi / 180)
        px = x + size * math.cos(angle)
        py = y + size * math.sin(angle)
        if i == 0:
            ctx.moveTo(px, py)
        else:
            ctx.lineTo(px, py)
    ctx.closePath()
    ctx.fillStyle = color
    ctx.fill()

# 繪製菱形
def draw_diamond(x, y, width, height, color):
    ctx.beginPath()
    ctx.moveTo(x, y - height / 2)
    ctx.lineTo(x + width / 2, y)
    ctx.lineTo(x, y + height / 2)
    ctx.lineTo(x - width / 2, y)
    ctx.closePath()
    ctx.fillStyle = color
    ctx.fill()

# 繪製三角形
def draw_triangle(x, y, size, color):
    ctx.beginPath()
    ctx.moveTo(x, y - size)  # 頂點
    ctx.lineTo(x - size, y + size)  # 左下角
    ctx.lineTo(x + size, y + size)  # 右下角
    ctx.closePath()
    ctx.fillStyle = color
    ctx.fill()

# 繪製圓形
def draw_circle(x, y, radius, color):
    ctx.beginPath()
    ctx.arc(x, y, radius, 0, 2 * math.pi)
    ctx.fillStyle = color
    ctx.fill()

# 繪製矩形
def draw_rectangle(x, y, width, height, color):
    ctx.beginPath()
    ctx.rect(x, y, width, height)
    ctx.fillStyle = color
    ctx.fill()

# 繪製長條形
def draw_bar(x, y, width, height, color):
    draw_rectangle(x, y, width, height, color)

# 繪製圖形
def draw_shapes():
    # 繪製圖形時調整 y 坐標，使其在原點下方
    draw_hexagon(origin_x + 50, origin_y + 100, 40, "orange")  # 六邊形
    draw_diamond(origin_x + 150, origin_y + 100, 50, 80, "teal")  # 菱形
    draw_triangle(origin_x + 250, origin_y + 100, 40, "cyan")  # 三角形
    draw_circle(origin_x + 350, origin_y + 100, 40, "pink")  # 圓形
    draw_rectangle(origin_x + 450, origin_y + 70, 60, 60, "yellow")  # 矩形
    draw_bar(origin_x + 550, origin_y + 85, 100, 30, "blue")  # 長條形

# 執行繪圖
draw_axes()
draw_shapes()</pre>
<p><br/><br/></p>
<p></p>
<p></p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['./../cmsimde/static/','./../downloads/py/']});
}
</script>
</p>
<div id="brython_div1"></div>
<p>
<script type="text/python3">
from browser import document, html
import math

# 初始化畫布
def initialize_canvas(canvas_width=1000, canvas_height=400):
    """
    初始化畫布，創建一個指定大小的 Canvas 元素，並將其加到 HTML 文件中。
    返回畫布元素和它的 2D 繪圖上下文。
    """
    canvas = html.CANVAS(width=canvas_width, height=canvas_height)
    document["brython_div1"] <= canvas  # 假設這是畫布放置的 HTML 容器ID
    ctx = canvas.getContext("2d")
    return canvas, ctx

# 設定學號後四碼原點 (31, 50)
origin_x, origin_y = 3.1 * 10, 5 * 10  # 原始座標

# 初始化畫布
canvas, ctx = initialize_canvas(1000, 400)

# 繪製 X 軸和 Y 軸，只畫向右和向下的部分，並標註
def draw_axes():
    ctx.beginPath()
    
    # 繪製 X 軸向右延伸
    ctx.moveTo(origin_x, origin_y)  # 原點
    ctx.lineTo(canvas.width, origin_y)  # 向右延伸
    ctx.lineTo(canvas.width - 10, origin_y - 5)  # X 軸箭頭
    ctx.lineTo(canvas.width - 10, origin_y + 5)  # X 軸箭頭
    ctx.strokeStyle = "black"
    ctx.lineWidth = 2
    ctx.stroke()

    # 繪製 Y 軸向下延伸
    ctx.beginPath()
    ctx.moveTo(origin_x, origin_y)  # 原點
    ctx.lineTo(origin_x, canvas.height)  # 向下延伸
    ctx.lineTo(origin_x - 5, canvas.height - 10)  # Y 軸箭頭
    ctx.lineTo(origin_x + 5, canvas.height - 10)  # Y 軸箭頭
    ctx.stroke()

    # 標註原點及方向
    ctx.fillStyle = "black"
    ctx.font = "12px Arial"
    ctx.fillText(f"({31}, {50})", origin_x + 5, origin_y - 5)
    ctx.fillText("正X", canvas.width - 40, origin_y - 10)  # X 軸正方向
    ctx.fillText("正Y", origin_x + 10, canvas.height - 10)  # Y 軸正方向

# 繪製六邊形
def draw_hexagon(x, y, size, color):
    ctx.beginPath()
    for i in range(6):
        angle = (i * 60) * (math.pi / 180)
        px = x + size * math.cos(angle)
        py = y + size * math.sin(angle)
        if i == 0:
            ctx.moveTo(px, py)
        else:
            ctx.lineTo(px, py)
    ctx.closePath()
    ctx.fillStyle = color
    ctx.fill()

# 繪製菱形
def draw_diamond(x, y, width, height, color):
    ctx.beginPath()
    ctx.moveTo(x, y - height / 2)
    ctx.lineTo(x + width / 2, y)
    ctx.lineTo(x, y + height / 2)
    ctx.lineTo(x - width / 2, y)
    ctx.closePath()
    ctx.fillStyle = color
    ctx.fill()

# 繪製三角形
def draw_triangle(x, y, size, color):
    ctx.beginPath()
    ctx.moveTo(x, y - size)  # 頂點
    ctx.lineTo(x - size, y + size)  # 左下角
    ctx.lineTo(x + size, y + size)  # 右下角
    ctx.closePath()
    ctx.fillStyle = color
    ctx.fill()

# 繪製圓形
def draw_circle(x, y, radius, color):
    ctx.beginPath()
    ctx.arc(x, y, radius, 0, 2 * math.pi)
    ctx.fillStyle = color
    ctx.fill()

# 繪製矩形
def draw_rectangle(x, y, width, height, color):
    ctx.beginPath()
    ctx.rect(x, y, width, height)
    ctx.fillStyle = color
    ctx.fill()

# 繪製長條形
def draw_bar(x, y, width, height, color):
    draw_rectangle(x, y, width, height, color)

# 繪製圖形
def draw_shapes():
    # 繪製圖形時調整 y 坐標，使其在原點下方
    draw_hexagon(origin_x + 50, origin_y + 100, 40, "orange")  # 六邊形
    draw_diamond(origin_x + 150, origin_y + 100, 50, 80, "teal")  # 菱形
    draw_triangle(origin_x + 250, origin_y + 100, 40, "cyan")  # 三角形
    draw_circle(origin_x + 350, origin_y + 100, 40, "pink")  # 圓形
    draw_rectangle(origin_x + 450, origin_y + 70, 60, 60, "yellow")  # 矩形
    draw_bar(origin_x + 550, origin_y + 85, 100, 30, "blue")  # 長條形

# 執行繪圖
draw_axes()
draw_shapes()
</script>
</p>
<p></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/p7RboVzgEWM?si=HaW2HFLvzRZYDsC2" title="YouTube video player" width="560"></iframe></p>
<p></p><h3>w16_exam2</h3>
<p></p>
<p>題目: 請以自己的學號最後四碼作為下列繪圖的左上方點座標, (例如: 若學號最後四碼為 3932, 請將 (39, 32) 作為繪圖左上方點座標), 並以紅色文字標示出該點座標 (例如: (39, 32)), 之後請利用 pixel=2 的藍色直線, 自訂迷宮畫布大小, 直接在頁面畫出下列圖像, 繪圖程式除了必須直接列在頁面 html 檔案外, 也請存入自己的 Gist 區域, 並在所完成的圖像下方, 以自選標題的 anchor 連結至 Gist, 讓使用者點擊該連結後, 可以在各自的 Brython 頁面中繪出下列圖像).</p>
<p></p>
<p><a href="https://ubiquitous-guacamole-7vpvrxq567rr3rx6j-8081.app.github.dev/content/Brython.html?src=https://gist.githubusercontent.com/41323150/0b5c3ede22da07e40801d66cad9b22d3/raw/9245e45c4f5e2f84b7bd16964e48efc4ec8b04d1/w16_exam2.py">解</a></p>
<p></p>
<p><a href="https://gist.githubusercontent.com/41323150/0b5c3ede22da07e40801d66cad9b22d3/raw/9245e45c4f5e2f84b7bd16964e48efc4ec8b04d1/w16_exam2.py">程式碼</a></p>
<p></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import html
from browser import document as doc

# 建立畫布
canvas = html.CANVAS(width=600, height=600)  # 畫布大小增加兩倍
brython_div = doc["brython_div1"]  # 將畫布放置於網頁中的指定 div
brython_div &lt;= canvas

# 取得 canvas 的 2D 繪圖上下文
ctx = canvas.getContext("2d")

# 每一格的像素大小
pixel_scale = 100  # 每格的像素比例增加兩倍 (原為20，放大到40)

# 定義原點 (31, 50) 作為起始點偏移
offset_x = 31 * 2  # 放大兩倍
offset_y = 50 * 2  # 放大兩倍

# 定義迷宮線條
lines = [
    ((0, 0), (1, 0)),
    ((2, 0), (5, 0)),
    ((5, 0), (5, 5)),
    ((0, 5), (4, 5)),
    ((4, 5), (4, 3)),
    ((2, 3), (4, 3)),
    ((1, 1), (1, 4)),
    ((3, 3), (3, 2)),
    # 第二條線
    ((0, 0), (0, 5)),
    ((0, 5), (4, 5)),
    ((4, 4), (2, 4)),
    ((2, 2), (2, 1)),
    ((1, 1), (4, 1)),
    ((4, 0), (4, 2)),
]

# 繪製迷宮線條
ctx.strokeStyle = "blue"  # 設定線條顏色
ctx.lineWidth = 2  # 設定線條寬度

for line in lines:
    start = line[0]
    end = line[1]
    ctx.beginPath()
    ctx.moveTo(
        offset_x + start[0] * pixel_scale,
        offset_y + start[1] * pixel_scale
    )
    ctx.lineTo(
        offset_x + end[0] * pixel_scale,
        offset_y + end[1] * pixel_scale
    )
    ctx.stroke()

# 將座標標示移動到紅點附近的適當位置
ctx.font = "18px Arial"  # 放大字體大小 (原為14px)
ctx.fillStyle = "red"
ctx.fillText("(31, 50)", offset_x + 10, offset_y - 15)  # 在紅點的右上方標出座標</pre>
<p><br/><br/></p>
<p></p>
<p></p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['./../cmsimde/static/','./../downloads/py/']});
}
</script>
</p>
<div id="brython_div1"></div>
<p>
<script type="text/python3">
from browser import html
from browser import document as doc

# 建立畫布
canvas = html.CANVAS(width=600, height=600)  # 畫布大小增加兩倍
brython_div = doc["brython_div1"]  # 將畫布放置於網頁中的指定 div
brython_div <= canvas

# 取得 canvas 的 2D 繪圖上下文
ctx = canvas.getContext("2d")

# 每一格的像素大小
pixel_scale = 100  # 每格的像素比例增加兩倍 (原為20，放大到40)

# 定義原點 (31, 50) 作為起始點偏移
offset_x = 31 * 2  # 放大兩倍
offset_y = 50 * 2  # 放大兩倍

# 定義迷宮線條
lines = [
    ((0, 0), (1, 0)),
    ((2, 0), (5, 0)),
    ((5, 0), (5, 5)),
    ((0, 5), (4, 5)),
    ((4, 5), (4, 3)),
    ((2, 3), (4, 3)),
    ((1, 1), (1, 4)),
    ((3, 3), (3, 2)),
    # 第二條線
    ((0, 0), (0, 5)),
    ((0, 5), (4, 5)),
    ((4, 4), (2, 4)),
    ((2, 2), (2, 1)),
    ((1, 1), (4, 1)),
    ((4, 0), (4, 2)),
]

# 繪製迷宮線條
ctx.strokeStyle = "blue"  # 設定線條顏色
ctx.lineWidth = 2  # 設定線條寬度

for line in lines:
    start = line[0]
    end = line[1]
    ctx.beginPath()
    ctx.moveTo(
        offset_x + start[0] * pixel_scale,
        offset_y + start[1] * pixel_scale
    )
    ctx.lineTo(
        offset_x + end[0] * pixel_scale,
        offset_y + end[1] * pixel_scale
    )
    ctx.stroke()

# 將座標標示移動到紅點附近的適當位置
ctx.font = "18px Arial"  # 放大字體大小 (原為14px)
ctx.fillStyle = "red"
ctx.fillText("(31, 50)", offset_x + 10, offset_y - 15)  # 在紅點的右上方標出座標
</script>
</p>
<p></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/OgfqL2e1MSc?si=w9tisidLTVpxLcy7" title="YouTube video player" width="560"></iframe></p><h3>w16_exam3</h3>
<p>題目: 請以自己的學號最後四碼作為下列繪圖的左上方點座標, (例如: 若學號最後四碼為 3932, 請將 (39, 32) 作為繪圖左上方點座標), 並以紅色文字標示出該點座標 (例如: (39, 32)), 之後請利用 pixel=2 的黑色直線, 自訂迷宮畫布大小, 直接在頁面畫出下列圖像, 並且利用紅色連續線段標示從上方入口, 走至下方出口的路線圖. 繪圖程式除了必須直接列在頁面 html 檔案外, 也請存入自己的 Gist 區域, 並在所完成的圖像下方, 以自選標題的 anchor 連結至 Gist, 讓使用者點擊該連結後, 可以在各自的 Brython 頁面中繪出下列圖像).</p>
<p></p>
<p><a href="https://ubiquitous-guacamole-7vpvrxq567rr3rx6j-8081.app.github.dev/content/Brython.html?src=https://gist.githubusercontent.com/41323150/0b5c3ede22da07e40801d66cad9b22d3/raw/71fc155f80d7c8994dbfd344cb99d2cea6225858/w16_exam3.py">解</a></p>
<p></p>
<p><a href="https://gist.githubusercontent.com/41323150/0b5c3ede22da07e40801d66cad9b22d3/raw/71fc155f80d7c8994dbfd344cb99d2cea6225858/w16_exam3.py">程式碼</a></p>
<p></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import html
from browser import document as doc

# 建立畫布
canvas = html.CANVAS(width=600, height=600)  # 畫布大小增加兩倍
brython_div = doc["brython_div1"]  # 將畫布放置於網頁中的指定 div
brython_div &lt;= canvas

# 取得 canvas 的 2D 繪圖上下文
ctx = canvas.getContext("2d")

# 每一格的像素大小
pixel_scale = 100  # 每格的像素比例增加兩倍 (原為20，放大到40)

# 定義原點 (31, 50) 作為起始點偏移
offset_x = 31 * 2  # 放大兩倍
offset_y = 50 * 2  # 放大兩倍

# 定義迷宮線條 (外框)
lines = [
    ((0, 0), (1, 0)),
    ((2, 0), (5, 0)),
    ((5, 0), (5, 5)),
    ((0, 5), (4, 5)),
    ((4, 5), (4, 3)),
    ((2, 3), (4, 3)),
    ((1, 1), (1, 4)),
    ((3, 3), (3, 2)),
    # 第二條線
    ((0, 0), (0, 5)),
    ((0, 5), (4, 5)),
    ((4, 4), (2, 4)),
    ((2, 2), (2, 1)),
    ((1, 1), (4, 1)),
    ((4, 0), (4, 2)),
]

# 繪製迷宮線條 (外框)
ctx.strokeStyle = "black"  # 設定外框顏色為黑色
ctx.lineWidth = 2  # 設定線條寬度

for line in lines:
    start = line[0]
    end = line[1]
    ctx.beginPath()
    ctx.moveTo(
        offset_x + start[0] * pixel_scale,
        offset_y + start[1] * pixel_scale
    )
    ctx.lineTo(
        offset_x + end[0] * pixel_scale,
        offset_y + end[1] * pixel_scale
    )
    ctx.stroke()

# 定義過關路線
solution_path = [
    ((1.5, 0), (1.5, 0.5)),
    ((0.5, 0.5), (1.5, 0.5)),
    ((0.5, 0.5), (0.5, 4.5)),
    ((0.5, 4.5), (1.5, 4.5)),
    ((1.5, 4.5), (1.5, 2.5)),
    ((1.5, 2.5), (2.5, 2.5)),
    ((2.5, 2.5), (2.5, 1.5)),
    ((2.5, 1.5), (3.5, 1.5)),
    ((3.5, 1.5), (3.5, 2.5)),
    ((3.5, 2.5), (4.5, 2.5)),
    ((4.5, 2.5), (4.5, 5)),
]

# 繪製過關路線
ctx.strokeStyle = "red"  # 設定過關路線顏色為紅色
ctx.lineWidth = 3  # 過關路線稍粗一些，便於區分

for line in solution_path:
    start = line[0]
    end = line[1]
    ctx.beginPath()
    ctx.moveTo(
        offset_x + start[0] * pixel_scale,
        offset_y + start[1] * pixel_scale
    )
    ctx.lineTo(
        offset_x + end[0] * pixel_scale,
        offset_y + end[1] * pixel_scale
    )
    ctx.stroke()

# 將座標標示移動到紅點附近的適當位置
ctx.font = "18px Arial"  # 放大字體大小 (原為14px)
ctx.fillStyle = "blue"  # 設定座標文字顏色為藍色
ctx.fillText("(31, 50)", offset_x + 10, offset_y - 15)  # 在紅點的右上方標出座標</pre>
<p><br/><br/></p>
<p></p>
<p></p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['./../cmsimde/static/','./../downloads/py/']});
}
</script>
</p>
<div id="brython_div1"></div>
<p>
<script type="text/python3">
from browser import html
from browser import document as doc

# 建立畫布
canvas = html.CANVAS(width=600, height=600)  # 畫布大小增加兩倍
brython_div = doc["brython_div1"]  # 將畫布放置於網頁中的指定 div
brython_div <= canvas

# 取得 canvas 的 2D 繪圖上下文
ctx = canvas.getContext("2d")

# 每一格的像素大小
pixel_scale = 100  # 每格的像素比例增加兩倍 (原為20，放大到40)

# 定義原點 (31, 50) 作為起始點偏移
offset_x = 31 * 2  # 放大兩倍
offset_y = 50 * 2  # 放大兩倍

# 定義迷宮線條 (外框)
lines = [
    ((0, 0), (1, 0)),
    ((2, 0), (5, 0)),
    ((5, 0), (5, 5)),
    ((0, 5), (4, 5)),
    ((4, 5), (4, 3)),
    ((2, 3), (4, 3)),
    ((1, 1), (1, 4)),
    ((3, 3), (3, 2)),
    # 第二條線
    ((0, 0), (0, 5)),
    ((0, 5), (4, 5)),
    ((4, 4), (2, 4)),
    ((2, 2), (2, 1)),
    ((1, 1), (4, 1)),
    ((4, 0), (4, 2)),
]

# 繪製迷宮線條 (外框)
ctx.strokeStyle = "black"  # 設定外框顏色為黑色
ctx.lineWidth = 2  # 設定線條寬度

for line in lines:
    start = line[0]
    end = line[1]
    ctx.beginPath()
    ctx.moveTo(
        offset_x + start[0] * pixel_scale,
        offset_y + start[1] * pixel_scale
    )
    ctx.lineTo(
        offset_x + end[0] * pixel_scale,
        offset_y + end[1] * pixel_scale
    )
    ctx.stroke()

# 定義過關路線
solution_path = [
    ((1.5, 0), (1.5, 0.5)),
    ((0.5, 0.5), (1.5, 0.5)),
    ((0.5, 0.5), (0.5, 4.5)),
    ((0.5, 4.5), (1.5, 4.5)),
    ((1.5, 4.5), (1.5, 2.5)),
    ((1.5, 2.5), (2.5, 2.5)),
    ((2.5, 2.5), (2.5, 1.5)),
    ((2.5, 1.5), (3.5, 1.5)),
    ((3.5, 1.5), (3.5, 2.5)),
    ((3.5, 2.5), (4.5, 2.5)),
    ((4.5, 2.5), (4.5, 5)),
]

# 繪製過關路線
ctx.strokeStyle = "red"  # 設定過關路線顏色為紅色
ctx.lineWidth = 3  # 過關路線稍粗一些，便於區分

for line in solution_path:
    start = line[0]
    end = line[1]
    ctx.beginPath()
    ctx.moveTo(
        offset_x + start[0] * pixel_scale,
        offset_y + start[1] * pixel_scale
    )
    ctx.lineTo(
        offset_x + end[0] * pixel_scale,
        offset_y + end[1] * pixel_scale
    )
    ctx.stroke()

# 將座標標示移動到紅點附近的適當位置
ctx.font = "18px Arial"  # 放大字體大小 (原為14px)
ctx.fillStyle = "blue"  # 設定座標文字顏色為藍色
ctx.fillText("(31, 50)", offset_x + 10, offset_y - 15)  # 在紅點的右上方標出座標
</script>
</p>
<p></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/NGR33pmq-sI?si=vIlbTzukR700WlDO" title="YouTube video player" width="560"></iframe></p>
<p></p><h1>HW 3</h1>
<h4>主題: Python 的數字、演算法與迴圈 (20%)</h4>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 4 and Part 5</p>
<p>完成上述流程整理後, 請將 HW3 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 3 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 3 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h1>HW 4</h1>
<h4>主題: 利用 Python 控制機電模擬系統 (20%)</h4>
<p style="padding-left: 30px;">利用 <a href="https://solvespace.com/">https://solvespace.com/</a> 建立機械系統零組件</p>
<p style="padding-left: 30px;">利用 <a href="https://www.coppeliarobotics.com/">CoppeliaSim</a> 建立機電模擬系統</p>
<p style="padding-left: 30px;">利用 <a href="https://manual.coppeliarobotics.com/en/zmqRemoteApiOverview.htm">Python</a> 跨網路控制瀏覽器上的機電模擬系統</p>
<p style="padding-left: 30px;">範例:</p>
<p style="padding-left: 60px;"><a href="/downloads/cd2023_pj3ag4_zmq_football_4.7.7z">cd2023_pj3ag4_zmq_football_4.7.7z</a></p>
<p style="padding-left: 60px;"><a href="https://localhost:9446/downloads/cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z">cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z</a></p>
<p>完成上述流程整理後, 請將 HW4 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 4 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 4 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h1>Final Report</h1>
<p>期末口頭與書面專題報告 (20%)</p>
<p>期末口頭專題報告影片:</p>
<p style="padding-left: 30px;">......</p>
<p>期末書面專題報告檔案 (pdf):</p>
<p style="padding-left: 30px;">......</p>
<p>電腦輔助設計與實習課程總結心得:</p>
<p style="padding-left: 30px;">......</p>
<p>期末報告自評成績:</p>
<p style="padding-left: 30px;">完成上述流程後, 請將 Final Report 自評分數輸入 cp2024 自評表單中.</p>
<h1>Brython</h1>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button><button id="threejsblock">Rotating Block</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>